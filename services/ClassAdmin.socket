#!/usr/bin/python3
import os,sys,socket,signal,platform,requests,urllib3,signal,time,ssl,re,threading
from sources.handlerSignals import HandlerSignals
from sources.utils import Environment, getIpAddress, logFile
from sources.notification import Notify
try:
    urllib3.disable_warnings()
    #threading.Thread(target=dnsUpdate,name="dnsUpdate",args=()).start()

    if len(sys.argv)==1 or  len(sys.argv)>2:
        raise BaseException(-5000,f"The script needs 1 argument\n\tClassAdmin.socket <nick>",True)

    # ENVIRONMENT VARIABLES
    NICK = f"{sys.argv[1]}"
    PORT = int(requests.get("https://classadmin.server/api/server/port",headers={
            "password":",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
            "otp":",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
        },verify="/etc/ssl/certs/ca-certificates.crt").json()["result"][0]["port"])

    print(f"PID: {os.getpid()}")
    HandlerSignals()
    # This creates a ssl tunnel with the ClassAdmin's certificate and private key
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    context.load_verify_locations('/etc/ssl/certs/ca-certificates.crt')
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sockSSL = context.wrap_socket(sock, server_hostname="classadmin.server")
    print(logFile().message(f"connecting", True, "INFO"))
    while True:
        try:
            sockSSL.connect(("classadmin.server",PORT))
            break
        except:
            pass
        time.sleep(.5)
    Notify("showinfo",logFile().message(f"ClassAdmin connected",True,"INFO"),True)
    sockSSL.send(f"HelloServer: {NICK}".encode("utf-8"))
    while True:
        data = sockSSL.recv(1024)
        text = data.decode("utf-8")
        if text.startswith("sig."):
            exec(f"raise {text.split('.')[1]}")
        elif data:
            print(data)
#When the service shutdown successfully
except (KeyboardInterrupt,SystemExit) as err:
    Notify("showinfo",logFile().message("shutdown ClassAdmin...", True,"INFO"),True)

#When the service has a error unexpected
except BaseException as err:
    if err.args[0]==-5000:
        print(logFile().message(err.args[1],err.args[2],"ERROR"))
    else:
        type, object, traceback = sys.exc_info()
        file = traceback.tb_frame.f_code.co_filename
        line = traceback.tb_lineno

        if type(err)==ConnectionError:
            print(logFile().message(f"Connection at database failed in {file}:{line}", True, "ERROR"))
        else:
            print(logFile().message(f"{err} in {file}:{line}",True,"ERROR"))

finally:
    try:
        sockSSL.send(b"sig.SystemExit")
        sockSSL.close()
    except:
        None