#!/usr/bin/python3
import os,sys,socket,signal,platform,requests,urllib3,signal,time,psutil,ssl,multiprocessing, threading
from sources.ClientListener import ClientListener
from sources.handlerSignals import HandlerSignals
from sources.utils import Environment, logFile, Hosts, getIpAddress
from sources.Server import Server
from sources.notification import Notify

class SocketServer:
    def __init__(self,**kwargs):
        try:
            self.args = kwargs["args"]
            self.__checkParams()
            Server.settingsChange(self.args)
            urllib3.disable_warnings()
            self.__globalsVars()
            Hosts.new("classadmin.server", getIpAddress(), Hosts.showIP("classadmin.server"))
            HandlerSignals()
            self.__createSocket()

        # When the service shutdown successfully
        except (KeyboardInterrupt, SystemExit) as err:
                None

        #When the service has a error unexpected
        except BaseException as err:
            if err.args[0]==-5000:
                print(logFile().message(err.args[1],err.args[2],"ERROR"))
            else:
                type, object, traceback = sys.exc_info()
                file = traceback.tb_frame.f_code.co_filename
                line = traceback.tb_lineno
                if type==ConnectionError:
                    print(logFile().message(f"Connection at database failed in {file}:{line}. I am sorry", True, "ERROR"))
                else:
                    print(logFile().message(f"{err} in {file}:{line}",True,"ERROR"))

        finally:
            try:
                self.sock.close()
            except:
                None
            print(logFile().message("Good Bye. What you have a good day :)", True, "INFO"))

    def __handlerClients(self):
        try:
            while self.sock:
                # The sock.accept() allows create a subprocess when there is a connection established
                # IMPORTANT: I don't add SSL at socket object because else the SSLSocket object can't pickle when pass it by argument in processing.Process()
                conn,addr = self.sock.accept()
                eventChildStop = multiprocessing.Event()
                subprocess = multiprocessing.Process(target=ClientListener, name="client", args=(conn,addr,eventChildStop))
                # This thread is responsible of close the client's child process
                threading.Thread(target=ClientListener.exitSubprocess,name="closeChildProcess",args=(eventChildStop,subprocess,)).start()
                subprocess.start()
                time.sleep(1)
        except:
            None

    def __createSocket(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(("",self.PORT))
        self.sock.listen(self.CLIENTS)
        print(logFile().message(f"Good days :D. I am running ClassAdmin server, listenning {self.CLIENTS} clients by port {self.PORT}...",True,"INFO"))
        self.__handlerClients()

    def __checkParams(self):
        if len(self.args)==1 or len(self.args)>2:
            raise BaseException(-5000,f"The script need 1 argument\n\tClassAdminS.socket <port>",True)
        elif int(self.args[1])<1 or int(self.args[1])>65535:
            raise BaseException(-5000, f"The port must be a range beetwen 1 and 65535", True)

    def __globalsVars(self):
        self.bufferClient = []
        try:
            self.PORT = requests.get("https://classadmin.server/api/server/port", headers={
                "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
                "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
            }, verify=Environment.CA)
            self.PORT = self.PORT.json()["result"][0]["port"]

            self.CLIENTS = requests.get("https://classadmin.server/api/server/clients", headers={
                "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
                "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
            }, verify=Environment.CA)
            self.CLIENTS = self.CLIENTS.json()["result"][0]["clients"]
        except:
            raise ConnectionError

if __name__=="__main__":
    SocketServer(args=sys.argv)