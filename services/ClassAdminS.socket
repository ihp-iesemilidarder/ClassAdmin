#!/usr/bin/python3
import os,sys,socket,signal,platform,requests,urllib3,signal,time,psutil,ssl,multiprocessing, threading
from sources.ClientListener import ClientListener
from sources.handlerSignals import HandlerSignals
from sources.utils import Environment, getIpAddress, logFile, dnsUpdate
from sources.notification import Notify
try:
    # globals variables
    clientsProcesses = []  # This storages the childs processes
    eventThread = threading.Event()
    threading.Thread(target=dnsUpdate, name="dnsUpdate", args=(eventThread,)).start()

    urllib3.disable_warnings()
    try:
        PORT = requests.get("https://classadmin.server/api/server/port", headers={
            "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
            "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
        }, cert=(f"{Environment.SSL('crt')}", f"{Environment.SSL('key')}"))
        PORT = PORT.json()["result"][0]["port"]

        CLIENTS = requests.get("https://classadmin.server/api/server/clients", headers={
            "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
            "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
        }, cert=(f"{Environment.SSL('crt')}", f"{Environment.SSL('key')}"))
        CLIENTS = CLIENTS.json()["result"][0]["clients"]
    except:
        raise ConnectionError
    print(f"PID: {os.getpid()}")
    HandlerSignals()

    # This creates a ssl tunnel with the ClassAdmin's certificate and private key
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain(Environment.SSL("crt"),Environment.SSL("key"))

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(("",PORT))
    sock.listen(CLIENTS)
    print(logFile().message(f"running ClassAdmin server, listen {CLIENTS} clients by port {PORT}...",True,"INFO"))
    sockSSL = context.wrap_socket(sock,server_side=True)
    event = multiprocessing.Event() # listening events of childs processes
    #threading.Thread(target=ClientListener.handlerEvent, name="exitChildProcess", args=(event, childProcess,os.getpid())).start()
    while sockSSL:
        connection, address = sockSSL.accept()
        subproccess = multiprocessing.Process(target=ClientListener, name="client", args=(connection, address, event))
        subproccess.start()
        clientsProcesses.append(subproccess)
        time.sleep(1)

#When the service shutdown successfully
except (KeyboardInterrupt,SystemExit) as err:
        print(logFile().message("shutdown ClassAdmin server...", True, "INFO"))

#When the service has a error unexpected
except BaseException as err:
    type, object, traceback = sys.exc_info()
    file = traceback.tb_frame.f_code.co_filename
    line = traceback.tb_lineno
    if type==ConnectionError:
        print(logFile().message(f"Connection at database failed in {file}:{line}", True, "ERROR"))
    else:
        print(logFile().message(f"{err} in {file}:{line}",True,"ERROR"))

finally:
    try:
        eventThread.set()
        sock.close()
    except:
        None