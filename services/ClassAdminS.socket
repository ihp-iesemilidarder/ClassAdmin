#!/usr/bin/python3
import os,sys,socket,signal,platform,requests,urllib3,signal,time,psutil
if platform.system().upper()=="LINUX":
    sys.path.append("/etc/ClassAdmin")
elif platform.system().upper()=="WINDOWS":
    sys.path.append("C:\\Program Files\\ClassAdmin")
from sources.handlerSignals import HandlerSignals
from sources.utils import Environment, getIpAddress, logFile,systemProcess
from sources.notification import Notify
try:
    urllib3.disable_warnings()
    try:
        PORT = requests.get("https://localhost/api/server/port", headers={
            "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
            "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
        }, cert=(f"{Environment.SSL('crt')}", f"{Environment.SSL('key')}"))
        PORT = PORT.json()["result"][0]["port"]

        CLIENTS = requests.get("https://localhost/api/server/clients", headers={
            "password": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS(",
            "otp": ",UPsz)ZfF~ZOh^:YH)o[4P<sF7$jS("
        }, cert=(f"{Environment.SSL('crt')}", f"{Environment.SSL('key')}"))
        CLIENTS = CLIENTS.json()["result"][0]["clients"]
    except:
        raise ConnectionError
    print(os.getpid())
    HandlerSignals()

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(("",PORT))
    sock.listen(CLIENTS)
    Notify("showinfo",logFile().message(f"running ClassAdmin server, listen {CLIENTS} clients...",True,"INFO"))
    connection,address = sock.accept()
    with connection:
        print("client connected")


#When the service shutdown successfully
except (KeyboardInterrupt,SystemExit) as err:
        Notify("showinfo",logFile().message("shutdown ClassAdmin server...", True, "INFO"))

#When the service has a error unexpected
except BaseException as err:
        if type(err)==ConnectionError:
            Notify("showerror", logFile().message(f"Connection at database failed", True, "ERROR"))
        else:
            Notify("showerror",logFile().message(f"{err}",True,"ERROR"))

finally:
    try:
        sock.close()
    except:
        None