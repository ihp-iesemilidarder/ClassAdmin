#!/usr/bin/python3
# Author: Ivan Heredia Planas
# ivanherediaplanas@protonmail.com
#
# Licensed by GNU GENERAL PUBLIC LICENSE VERSION 3
# This file is part of ClassAdmin.
# ClassAdmin is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# ClassAdmin is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with ClassAdmin. If not, see <https://www.gnu.org/licenses/>.
# Copyright 2022 Ivan Heredia Planas
#
# This is Server program
#
import sys,socket,urllib3,time,multiprocessing, threading
from sources.ClientListener import ClientListener
from sources.handlerSignals import HandlerSignals
from sources.utils import LogFile, Hosts, getIpAddress, Notify
from sources.Server import Server
from sources.Requests import Requests
from sources.pipeServer import PipeServer
# Server main class
class SocketServer:
    def __init__(self,**kwargs):
        try:
            self.args = kwargs["args"]
            self.__checkParams()
            # Here the modification Hosts, else this will fail
            Hosts.new("classadmin.server", getIpAddress(), Hosts.showIP("classadmin.server"))
            Server.settingsChange(self.args)
            urllib3.disable_warnings()
            self.__globalsVars()
            self.__createSocket()
            
        # When the service shutdown successfully
        except (KeyboardInterrupt, SystemExit,GeneratorExit) as err:
                None

        #When the service has a error unexpected
        except BaseException as err:
            if err.args[0]==-5000:
                Notify("Error", LogFile().message(err.args[1], err.args[2], "ERROR"))
            else:
                type, object, traceback = sys.exc_info()
                file = traceback.tb_frame.f_code.co_filename
                line = traceback.tb_lineno
                if type==ConnectionError:
                    Notify("Error", LogFile().message(f"Connection at database failed in {file}:{line}. I am sorry", True, "ERROR"))
                else:
                    Notify("Error", LogFile().message(f"{err} in {file}:{line}", True, "ERROR"))

        # close server
        finally:
            try:
                self.eventPipe.set()
                self.pipeServer.terminate()
                self.sock.close()
            except:
                None
            Notify("Turnning off ClassAdminS", LogFile().message("Good Bye. What you have a good day :)", True, "INFO"))

    # this method listen each client connected, and for each client create us a ClientListener class subprocess
    def __handlerClients(self):
        try:
            while self.sock:
                # The sock.accept() allows create a subprocess when there is a connection established
                # IMPORTANT: I don't add SSL at socket object because else the SSLSocket object can't pickle when pass it by argument in processing.Process()
                conn,addr = self.sock.accept()
                eventChildStop = multiprocessing.Event()
                subprocess = multiprocessing.Process(target=ClientListener, name="client", args=(conn,addr,eventChildStop))

                # This thread is responsible of close the client's child process
                threading.Thread(target=ClientListener.exitSubprocess,name="closeChildProcess",args=(eventChildStop,subprocess,)).start()
                subprocess.start()
                time.sleep(1)
        except:
            None

    def __createSocket(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(("",self.PORT))
        self.sock.listen(self.CLIENTS)
        self.__comunicationServer()
        HandlerSignals(self.sock)
        Notify("Start ClassAdminS", LogFile().message(f"Good days :D. I am listenning {self.CLIENTS} clients by port {self.PORT}.", True, "INFO"))
        self.__handlerClients()

    # This checks if the arguments in command line are valids.
    def __checkParams(self):
        if len(self.args)==1 or len(self.args)>2:
            raise BaseException(-5000,f"The script need 1 argument\n\tClassAdminS.socket <port>",True)
        elif int(self.args[1])<1 or int(self.args[1])>65535:
            raise BaseException(-5000, f"The port must be a range beetwen 1 and 65535", True)

    # This puts values of globals variables declared in the __init__ method.
    def __globalsVars(self):
        self.bufferClient = []
        try:
            self.PORT = Requests("services", "GET", "https://classadmin.server/api/servers").run().json()["result"][0]["port"]

            self.CLIENTS = Requests("services","GET","https://classadmin.server/api/servers").run().json()["result"][0]["clients"]
        except:
            raise ConnectionError

    # miniserver for to allow from Django comunicate and send data.
    def __comunicationServer(self):
        self.eventPipe = multiprocessing.Event()
        self.pipeServer = multiprocessing.Process(target=PipeServer, name="pipeServer", args=(self.eventPipe,))
        threading.Thread(target=PipeServer.close, name="closePipeServer",args=(self.pipeServer, self.eventPipe,)).start()
        self.pipeServer.start()

if __name__=="__main__":
    SocketServer(args=sys.argv)