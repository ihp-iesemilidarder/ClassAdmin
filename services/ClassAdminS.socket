#!/usr/bin/python3
import sys,socket,urllib3,time,multiprocessing, threading
from sources.ClientListener import ClientListener
from sources.handlerSignals import HandlerSignals
from sources.utils import logFile, Hosts, getIpAddress, Notify
from sources.Server import Server
from sources.Requests import Requests

class SocketServer:
    def __init__(self,**kwargs):
        try:
            self.args = kwargs["args"]
            self.__checkParams()
            # Here the modification Hosts, else this will fail
            Hosts.new("classadmin.server", getIpAddress(), Hosts.showIP("classadmin.server"))
            Server.settingsChange(self.args)
            urllib3.disable_warnings()
            self.__globalsVars()
            self.__createSocket()

        # When the service shutdown successfully
        except (KeyboardInterrupt, SystemExit,GeneratorExit) as err:
                None

        #When the service has a error unexpected
        except BaseException as err:
            if err.args[0]==-5000:
                Notify("Error",logFile().message(err.args[1],err.args[2],"ERROR"))
            else:
                type, object, traceback = sys.exc_info()
                file = traceback.tb_frame.f_code.co_filename
                line = traceback.tb_lineno
                if type==ConnectionError:
                    Notify("Error",logFile().message(f"Connection at database failed in {file}:{line}. I am sorry", True, "ERROR"))
                else:
                    Notify("Error",logFile().message(f"{err} in {file}:{line}",True,"ERROR"))

        finally:
            try:
                self.sock.close()
            except:
                None
            Notify("Turnning off ClassAdminS",logFile().message("Good Bye. What you have a good day :)", True, "INFO"))

    def __handlerClients(self):
        try:
            while self.sock:
                # The sock.accept() allows create a subprocess when there is a connection established
                # IMPORTANT: I don't add SSL at socket object because else the SSLSocket object can't pickle when pass it by argument in processing.Process()
                conn,addr = self.sock.accept()
                eventChildStop = multiprocessing.Event()
                subprocess = multiprocessing.Process(target=ClientListener, name="client", args=(conn,addr,eventChildStop))

                # This thread is responsible of close the client's child process
                threading.Thread(target=ClientListener.exitSubprocess,name="closeChildProcess",args=(eventChildStop,subprocess,)).start()
                subprocess.start()
                time.sleep(1)
        except:
            None

    def __createSocket(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(("",self.PORT))
        self.sock.listen(self.CLIENTS)
        HandlerSignals(self.sock)
        Notify("Start ClassAdminS",logFile().message(f"Good days :D. I am listenning {self.CLIENTS} clients by port {self.PORT}.",True,"INFO"))
        self.__handlerClients()

    def __checkParams(self):
        if len(self.args)==1 or len(self.args)>2:
            raise BaseException(-5000,f"The script need 1 argument\n\tClassAdminS.socket <port>",True)
        elif int(self.args[1])<1 or int(self.args[1])>65535:
            raise BaseException(-5000, f"The port must be a range beetwen 1 and 65535", True)

    def __globalsVars(self):
        self.bufferClient = []
        try:
            self.PORT = Requests("services", "GET", "https://classadmin.server/api/servers").run().json()["result"][0]["port"]

            self.CLIENTS = Requests("services","GET","https://classadmin.server/api/servers").run().json()["result"][0]["clients"]
        except:
            raise ConnectionError

    # miniserver for to allow from Django comunicate and send data.
    def __comunicationServer(self):
        self.eventPipe = multiprocessing.Event()
        self.pipeServer = multiprocessing.Process(target=PipeServer, name="pipeClient", args=(self.eventPipe,))
        threading.Thread(target=PipeServer.close, name="closePipeClient",args=(self.pipeServer, self.eventPipe,)).start()
        self.pipeServer.start()
if __name__=="__main__":
    SocketServer(args=sys.argv)